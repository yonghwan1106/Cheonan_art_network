import request from 'supertest';
import express from 'express';
import notificationRoutes from '../notifications';
import { notificationService } from '../../services/notificationService';
import { authMiddleware } from '../../middleware/auth';

// Mock the notification service
jest.mock('../../services/notificationService', () => ({
  notificationService: {
    getUserNotifications: jest.fn(),
    getNotificationStats: jest.fn(),
    createNotification: jest.fn(),
    markAsRead: jest.fn(),
    markAllAsRead: jest.fn(),
    deleteNotification: jest.fn(),
    getUserSettings: jest.fn(),
    updateUserSettings: jest.fn(),
    createCongestionAlert: jest.fn(),
    createRouteOptimizationAlert: jest.fn(),
    createDepartureReminder: jest.fn(),
    createPointsEarnedNotification: jest.fn()
  }\n}));\n\n// Mock auth middleware\njest.mock('../../middleware/auth', () => ({\n  authMiddleware: (req: any, res: any, next: any) => {\n    req.user = { id: 'test-user-id' };\n    next();\n  }\n}));\n\nconst app = express();\napp.use(express.json());\napp.use('/api/notifications', notificationRoutes);\n\ndescribe('Notification Routes', () => {\n  const mockNotifications = [\n    {\n      id: 'notif-1',\n      userId: 'test-user-id',\n      type: 'congestion_alert',\n      title: '혼잡도 경고',\n      message: '2호선에서 높은 혼잡도가 감지되었습니다.',\n      priority: 'high',\n      category: 'traffic',\n      isRead: false,\n      createdAt: new Date().toISOString()\n    },\n    {\n      id: 'notif-2',\n      userId: 'test-user-id',\n      type: 'route_suggestion',\n      title: '경로 최적화 제안',\n      message: '6호선 경유를 이용하시면 12분 절약할 수 있습니다.',\n      priority: 'medium',\n      category: 'traffic',\n      isRead: true,\n      createdAt: new Date().toISOString()\n    }\n  ];\n\n  const mockStats = {\n    total: 2,\n    unread: 1,\n    byCategory: { traffic: 2 },\n    byPriority: { high: 1, medium: 1 }\n  };\n\n  const mockSettings = {\n    userId: 'test-user-id',\n    enabled: true,\n    congestionAlerts: true,\n    routeSuggestions: true,\n    scheduleReminders: true,\n    systemUpdates: true,\n    incentiveNotifications: true,\n    quietHours: {\n      enabled: false,\n      startTime: '22:00',\n      endTime: '07:00'\n    },\n    deliveryMethods: {\n      push: true,\n      email: false,\n      sms: false\n    }\n  };\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('GET /api/notifications', () => {\n    it('returns user notifications successfully', async () => {\n      (notificationService.getUserNotifications as jest.Mock).mockReturnValue(mockNotifications);\n      (notificationService.getNotificationStats as jest.Mock).mockReturnValue(mockStats);\n\n      const response = await request(app)\n        .get('/api/notifications')\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data.notifications).toEqual(mockNotifications);\n      expect(response.body.data.stats).toEqual(mockStats);\n      expect(response.body.data.pagination).toBeDefined();\n    });\n\n    it('applies query parameters correctly', async () => {\n      (notificationService.getUserNotifications as jest.Mock).mockReturnValue(mockNotifications);\n      (notificationService.getNotificationStats as jest.Mock).mockReturnValue(mockStats);\n\n      await request(app)\n        .get('/api/notifications?limit=10&offset=5&unreadOnly=true&category=traffic')\n        .expect(200);\n\n      expect(notificationService.getUserNotifications).toHaveBeenCalledWith('test-user-id', {\n        limit: 10,\n        offset: 5,\n        unreadOnly: true,\n        category: 'traffic'\n      });\n    });\n\n    it('validates limit parameter', async () => {\n      const response = await request(app)\n        .get('/api/notifications?limit=150')\n        .expect(400);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.error).toContain('Limit must be a number between 1 and 100');\n    });\n\n    it('validates offset parameter', async () => {\n      const response = await request(app)\n        .get('/api/notifications?offset=-1')\n        .expect(400);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.error).toContain('Offset must be a non-negative number');\n    });\n  });\n\n  describe('POST /api/notifications', () => {\n    it('creates notification successfully', async () => {\n      const mockNotification = mockNotifications[0];\n      (notificationService.createNotification as jest.Mock).mockReturnValue(mockNotification);\n\n      const response = await request(app)\n        .post('/api/notifications')\n        .send({\n          type: 'congestion_high',\n          data: { routeName: '2호선' }\n        })\n        .expect(201);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data).toEqual(mockNotification);\n      expect(notificationService.createNotification).toHaveBeenCalledWith(\n        'test-user-id',\n        'congestion_high',\n        { routeName: '2호선' },\n        undefined\n      );\n    });\n\n    it('requires notification type', async () => {\n      const response = await request(app)\n        .post('/api/notifications')\n        .send({})\n        .expect(400);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.error).toContain('Notification type is required');\n    });\n\n    it('handles service errors', async () => {\n      (notificationService.createNotification as jest.Mock).mockImplementation(() => {\n        throw new Error('Service error');\n      });\n\n      const response = await request(app)\n        .post('/api/notifications')\n        .send({ type: 'congestion_high' })\n        .expect(500);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.error).toBe('Service error');\n    });\n  });\n\n  describe('PUT /api/notifications/:id/read', () => {\n    it('marks notification as read successfully', async () => {\n      (notificationService.markAsRead as jest.Mock).mockReturnValue(true);\n\n      const response = await request(app)\n        .put('/api/notifications/notif-1/read')\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data.message).toContain('marked as read');\n      expect(notificationService.markAsRead).toHaveBeenCalledWith('notif-1');\n    });\n\n    it('returns 404 for non-existent notification', async () => {\n      (notificationService.markAsRead as jest.Mock).mockReturnValue(false);\n\n      const response = await request(app)\n        .put('/api/notifications/non-existent/read')\n        .expect(404);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.error).toContain('Notification not found');\n    });\n  });\n\n  describe('PUT /api/notifications/read-all', () => {\n    it('marks all notifications as read successfully', async () => {\n      (notificationService.markAllAsRead as jest.Mock).mockReturnValue(3);\n\n      const response = await request(app)\n        .put('/api/notifications/read-all')\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data.count).toBe(3);\n      expect(response.body.data.message).toContain('3 notifications marked as read');\n      expect(notificationService.markAllAsRead).toHaveBeenCalledWith('test-user-id');\n    });\n  });\n\n  describe('DELETE /api/notifications/:id', () => {\n    it('deletes notification successfully', async () => {\n      (notificationService.deleteNotification as jest.Mock).mockReturnValue(true);\n\n      const response = await request(app)\n        .delete('/api/notifications/notif-1')\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data.message).toContain('deleted successfully');\n      expect(notificationService.deleteNotification).toHaveBeenCalledWith('notif-1');\n    });\n\n    it('returns 404 for non-existent notification', async () => {\n      (notificationService.deleteNotification as jest.Mock).mockReturnValue(false);\n\n      const response = await request(app)\n        .delete('/api/notifications/non-existent')\n        .expect(404);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.error).toContain('Notification not found');\n    });\n  });\n\n  describe('GET /api/notifications/settings', () => {\n    it('returns user notification settings', async () => {\n      (notificationService.getUserSettings as jest.Mock).mockReturnValue(mockSettings);\n\n      const response = await request(app)\n        .get('/api/notifications/settings')\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data).toEqual(mockSettings);\n      expect(notificationService.getUserSettings).toHaveBeenCalledWith('test-user-id');\n    });\n  });\n\n  describe('PUT /api/notifications/settings', () => {\n    it('updates user notification settings', async () => {\n      const updatedSettings = { ...mockSettings, enabled: false };\n      (notificationService.updateUserSettings as jest.Mock).mockReturnValue(updatedSettings);\n\n      const response = await request(app)\n        .put('/api/notifications/settings')\n        .send({ enabled: false })\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data).toEqual(updatedSettings);\n      expect(notificationService.updateUserSettings).toHaveBeenCalledWith(\n        'test-user-id',\n        { enabled: false }\n      );\n    });\n  });\n\n  describe('POST /api/notifications/test-alerts', () => {\n    it('creates test notifications successfully', async () => {\n      const testNotifications = [mockNotifications[0]];\n      (notificationService.createCongestionAlert as jest.Mock).mockReturnValue(mockNotifications[0]);\n      (notificationService.createRouteOptimizationAlert as jest.Mock).mockReturnValue(null);\n      (notificationService.createDepartureReminder as jest.Mock).mockReturnValue(null);\n      (notificationService.createPointsEarnedNotification as jest.Mock).mockReturnValue(null);\n\n      const response = await request(app)\n        .post('/api/notifications/test-alerts')\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data.notifications).toHaveLength(1);\n      expect(response.body.data.message).toContain('1 test notifications created');\n    });\n\n    it('calls all test notification creation methods', async () => {\n      (notificationService.createCongestionAlert as jest.Mock).mockReturnValue(null);\n      (notificationService.createRouteOptimizationAlert as jest.Mock).mockReturnValue(null);\n      (notificationService.createDepartureReminder as jest.Mock).mockReturnValue(null);\n      (notificationService.createPointsEarnedNotification as jest.Mock).mockReturnValue(null);\n\n      await request(app)\n        .post('/api/notifications/test-alerts')\n        .expect(200);\n\n      expect(notificationService.createCongestionAlert).toHaveBeenCalledWith(\n        'test-user-id',\n        '2호선',\n        'high',\n        87\n      );\n      expect(notificationService.createRouteOptimizationAlert).toHaveBeenCalledWith(\n        'test-user-id',\n        '2호선',\n        '6호선 경유',\n        12\n      );\n      expect(notificationService.createDepartureReminder).toHaveBeenCalled();\n      expect(notificationService.createPointsEarnedNotification).toHaveBeenCalledWith(\n        'test-user-id',\n        25,\n        1275,\n        '혼잡 시간대 회피'\n      );\n    });\n  });\n\n  describe('GET /api/notifications/stats', () => {\n    it('returns notification statistics', async () => {\n      (notificationService.getNotificationStats as jest.Mock).mockReturnValue(mockStats);\n\n      const response = await request(app)\n        .get('/api/notifications/stats')\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data).toEqual(mockStats);\n      expect(notificationService.getNotificationStats).toHaveBeenCalledWith('test-user-id');\n    });\n  });\n\n  describe('Error handling', () => {\n    it('handles service errors gracefully', async () => {\n      (notificationService.getUserNotifications as jest.Mock).mockImplementation(() => {\n        throw new Error('Database connection failed');\n      });\n\n      const response = await request(app)\n        .get('/api/notifications')\n        .expect(500);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.error).toBe('Database connection failed');\n    });\n\n    it('includes timestamp in all responses', async () => {\n      (notificationService.getUserNotifications as jest.Mock).mockReturnValue([]);\n      (notificationService.getNotificationStats as jest.Mock).mockReturnValue(mockStats);\n\n      const response = await request(app)\n        .get('/api/notifications')\n        .expect(200);\n\n      expect(response.body.timestamp).toBeDefined();\n      expect(new Date(response.body.timestamp)).toBeInstanceOf(Date);\n    });\n  });\n});"